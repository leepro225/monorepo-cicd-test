name: Build and Deploy only affected Apps to Amazon ECS

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "**.md"
      
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.S3_BUCKET_REGION }}
  AWS_S3_PREFIX: peter
  NODE_VERSION: 18.12.1

jobs:      
  check-affected-apps:
    runs-on: ubuntu-latest
    name: JOB | CHECKING...🔍
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      hasAffected: ${{ steps.check-for-affected.outputs.hasAffected }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm i nx
    
      - name: << Set head and base for comparison >>
        uses: nrwl/nx-set-shas@v3

      - name: << Check for affected projects >>
        uses: dkhunt27/action-nx-affected-list@v4
        id: check-for-affected
      
      - name: << Set matrix for next job >> 
        id: set-matrix
        run: echo "matrix={\"affectedApps\":${{ toJSON(steps.check-for-affected.outputs.affectedApps) }}}" >> $GITHUB_OUTPUT

      - name: << Job results >>
        run: echo "영향받은 앱 체크가 완료되었습니다. 빌드 예정인 앱 = ${{ steps.check-for-affected.outputs.affectedApps }}" 
        
  build:
    needs: [check-affected-apps]
    if: needs.check-affected-apps.outputs.hasAffected == 'true'
    runs-on: ubuntu-latest
    name: JOB | BUILDING...🔨
    strategy:
      matrix: ${{ fromJSON(needs.check-affected-apps.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci
      
      - name: << Build an app >> 
        id: build-app
        run: |
          echo "APPNAME=${{matrix.affectedApps}}" >> $GITHUB_OUTPUT
          echo "PATH=dist/packages/${APPNAME/-/\/}" >> $GITHUB_OUTPUT
          npx nx run ${ steps.build-app.ouputs.APPNAME }:build
          npx nx run ${ APPNAME }:test
              
      - name: << Upload an artifact >>
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build-app.outputs.APPNAME }}
          path: ${{ steps.build-app.outputs.PATH }}
      
      - name: << Job results >>
        if: ${{ success() }}
        run: echo "영향받은 앱 빌드와 테스트가 완료되었습니다. 배포 예정인 앱 = ${{ steps.build-app.outputs.APPNAME }}"
      - if: ${{ steps.build-app.result != 'success' }}
        run: echo "영향받은 앱이 없거나, 빌드와 테스트를 진행하는 중 문제가 발생했습니다."

  deploy:
    needs: [check-affected-apps, build]
    if: ${{ success() }}
    runs-on: ubuntu-latest
    name: JOB | DEPLOYING...🎊
    strategy:
        matrix: ${{ fromJSON(needs.check-affected-apps.outputs.matrix) }}
    steps:
      - name: << Set ENV for S3 >>
        id: set-env
        run: |
          APPNAME=${{ matrix.affectedApps }}
          echo "AWS_S3_BUCKET=${env.AWS_S3_PREFIX}${APPNAME#app}" >> $GITHUB_ENV
          echo "SOURCE_DIR=./${APPNAME}" >> $GITHUB_ENV
          
      - name: << Download an artifact >>
        uses: actions/download-artifact@v1
        with:
          name: $APPNAME
          
      - name: << Deploy an app to S3 >>
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET }}
          SOURCE_DIR: ${{ env.SOURCE_DIR }}
          
      - name: << Job results >>
        run: echo "${APPNAME} - 앱 배포가 완료되었습니다." 
